#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    char data;
    bool terminal;
    unordered_map<char, Node*> children;
    int countWordsEndingHere;
    int countWordsStartingHere;

    Node(char data) {
        this->data = data;
        this->terminal = false; // Corrected: terminal should be initialized to false
        this->countWordsEndingHere = this->countWordsStartingHere = 0;
    }
};

class Trie {
public:
    Node* root;

    Trie() {
        root = new Node('\0');
    }
    void insert(string &word) {
        Node* curr = root;
        for (int i = 0; i < word.size(); i++) {
            char ch = word[i];
            if (curr->children.count(ch)) {
                curr = curr->children[ch];
            } else {
                Node* child = new Node(ch);
                curr->children[ch] = child;
                curr = child;
            }
            curr->countWordsStartingHere++; // Corrected: Increment countWordsStartingHere for all nodes traversed
        }
        curr->terminal = true;
        curr->countWordsEndingHere++;
    }

    int countWordsEqualTo(string &word) {
        Node* curr = root;
        for (int i = 0; i < word.size(); i++) {
            char ch = word[i];
            if (curr->children.count(ch)) {
                curr = curr->children[ch];
            } else {
                return 0;
            }
        }
        return curr->countWordsEndingHere;
    }

    int countWordsStartingWith(string &prefix) {
        Node* curr = root;
        for (int i = 0; i < prefix.size(); i++) {
            char ch = prefix[i];
            if (curr->children.count(ch)) {
                curr = curr->children[ch];
            } else {
                return 0;
            }
        }
        return curr->countWordsStartingHere;
    }

    void erase(string &word) {
        Node* curr = root;
        for (int i = 0; i < word.size(); i++) {
            char ch = word[i];
            curr = curr->children[ch];
            curr->countWordsStartingHere--; // Corrected: Decrement countWordsStartingHere for all nodes traversed
        }
        curr->countWordsEndingHere--;
    }
};

